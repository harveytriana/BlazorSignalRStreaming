@page "/streaming-in"
@inject NavigationManager NavigationManager
@implements IAsyncDisposable

<h3><i class="oi oi-cloud-download"></i> SignalR Streaming In</h3>
<hr />
<h5>
    The client receives a stream of the Server.
</h5>
<br />
<div>
    <button class="btn btn-primary"
            style="width:130px;"
            disabled="@(state=="CANCEL")"
            @onclick="Start">
        Start
    </button>
    <button class="btn btn-danger"
            style="width:130px;"
            disabled="@(state=="START")"
            @onclick="Cancel">
        Cancel
    </button>
</div>
<hr />
<ul>
    @foreach (var i in ls) {
        <li>@i</li>
    }
</ul>
<p>
    @status
</p>

@code{
    string state = "START";
    bool cancel;
    string status;
    List<string> ls = new();

    StreamingHandler _streamingHandler;

    async Task Start()
    {
        state = "CANCEL";
        status = "";
        cancel = false;
        ls.Clear();

        _streamingHandler = new StreamingHandler();

        var serviceUrl = NavigationManager.ToAbsoluteUri("/StreamSender").ToString();
        await _streamingHandler.ConnectAsync(serviceUrl);
        _streamingHandler.Prompt += (s) => Prompt(s);
        await _streamingHandler.StartDownlodStream();

        if (!cancel) status = "End stream.";

        // end task
        state = "START";
    }

    void Cancel()
    {
        _streamingHandler.Cancel();
    }

    void Prompt(string message)
    {
        if (message == "COMPLETED") {
            status = "Completed.";
            state = "START";
        }
        else if (message == "CANCEL") {
            status = "Canceled.";
            state = "START";
        }
        else {
            ls.Add(message);
        }
        StateHasChanged();
    }

    public async ValueTask DisposeAsync()
    {
        if (_streamingHandler != null) {
            _streamingHandler.Dispose();
            await Task.Delay(300);
        }
    }
}