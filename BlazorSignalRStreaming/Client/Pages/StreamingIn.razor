@using Microsoft.AspNetCore.SignalR.Client
@using System.Threading
@page "/streaming-in"
@inject NavigationManager NavigationManager
@implements IAsyncDisposable

<h3><i class="oi oi-cloud-download"></i> SignalR Streaming In</h3>
<hr />
<h5>
    The client receives a stream of the Server.
</h5>
<br />
<div>
    <button class="btn btn-primary"
            style="width:130px;"
            disabled="@(state=="CANCEL")"
            @onclick="Start">
        Start
    </button>
    <button class="btn btn-danger"
            style="width:130px;"
            disabled="@(state=="START")"
            @onclick="Cancel">
        Cancel
    </button>
</div>
<hr />
<ul>
    @foreach (var i in ls) {
        <li>@i</li>
    }
</ul>
<p>
    @status
</p>

@code{
    HubConnection connection;
    CancellationTokenSource cts;
    bool connected;
    bool cancel;
    string state = "START";
    string status;
    List<string> ls = new();

    async Task Start()
    {
        state = "CANCEL";
        status = "";
        cancel = false;
        ls.Clear();

        await ConnectAsync();
        if (connected) {
            await StartDownlodStream();
        }
    }

    public async Task StartDownlodStream()
    {
        // The correct syntax is:
        await foreach (var count in connection.StreamAsync<int>("CounterEnumerable", 12, 333, cts.Token)) {
            ls.Add($"Received {count}");
            StateHasChanged();
        }
        status = "Completed";
        state = "START";
        await DisposeAsync();
    }

    async Task Cancel()
    {
        cts.Cancel();
        status = "Canceled.";
        state = "START";
        await DisposeAsync();
    }

    async Task ConnectAsync()
    {
        connected = false;

        var hubUrl = NavigationManager.ToAbsoluteUri("/StreamSender").ToString();
        try {
            connection = new HubConnectionBuilder()
                .WithUrl(hubUrl)
                .Build();

            cts = new CancellationTokenSource();

            await connection.StartAsync(cts.Token);

            connected = true;
        }
        catch (Exception exception) {
            status = $"Exception: {exception.Message}";
        }
    }

    public async ValueTask DisposeAsync()
    {
        if (connected) {
            await connection.StopAsync();
            await connection.DisposeAsync();
            await Task.Delay(300);
            connected = false;
        }
    }
}