@page "/streaming-out"

<h3><i class="oi oi-cloud-upload"></i> SignalR Streaming Out</h3>
<hr />
<h5>
    The Clint send a stream to Server
</h5>
<br />
<div>
    <button class="btn btn-primary"
            style="width:130px;"
            disabled="@(state=="CANCEL")"
            @onclick="Start">
        Start
    </button>
    <button class="btn btn-danger"
            style="width:130px;"
            disabled="@(state=="START")"
            @onclick="Cancel">
        Cancel
    </button>
</div>
<hr />
<ul>
    @foreach (var i in ls) {
        <li>@i</li>
    }
</ul>
<p>
    @prompt
</p>
@code{
    string state;
    bool disabled;
    bool cancel;
    string prompt;
    List<string> ls = new();

    const int N = 16;

    async Task Start()
    {
        ls.Clear();
        state = "CANCEL";
        cancel = false;
        prompt = "";
        for (int i = 1; i <= N; i++) {
            ls.Add($"Sending fragment {i} of {N}");
            await Task.Delay(500);
            StateHasChanged();
            if (cancel) {
                break;
            }
        }
        if (!cancel) prompt = "End stream.";
        // end task
        state = "START";
    }

    async Task Cancel()
    {
        cancel = true;
        await Task.Delay(300);
        prompt = "Canceled.";
    }

    protected override void OnInitialized()
    {
        state = "START";
    }
}