@using Microsoft.AspNetCore.SignalR.Client
@using System.Threading
@page "/streaming-out"
@inject NavigationManager NavigationManager
@implements IAsyncDisposable

<h3><i class="oi oi-cloud-upload"></i> SignalR Streaming Out</h3>
<hr />
<h5>
    The Clint send a stream to Server
</h5>
<br />
<div>
    <button class="btn btn-primary"
            style="width:130px;"
            disabled="@(state=="CANCEL")"
            @onclick="Start">
        Start
    </button>
    <button class="btn btn-danger"
            style="width:130px;"
            disabled="@(state=="START")"
            @onclick="Cancel">
        Cancel
    </button>
</div>
<hr />
<ul>
    @foreach (var i in ls) {
        <li>@i</li>
    }
</ul>
<p>
    @status
</p>

@code{
    HubConnection connection;
    bool connected;
    bool cancel;
    string state = "START";
    string status;
    List<string> ls = new();

    async Task Start()
    {
        state = "CANCEL";
        status = "";
        cancel = false;
        ls.Clear();

        await ConnectAsync();
        if (connected) {
            await connection.SendAsync("UploadStreamEnumerable", ClientStreamData());
        }
    }

    async IAsyncEnumerable<string> ClientStreamData()
    {
        cancel = false;
        for (var i = 0; i < 8; i++) {
            if (cancel) {
                break;
            }
            var s = $"Some data {i}";
            ls.Add($"Sending -> {s}");
            await Task.Delay(500);

            // send to server
            yield return s;

            StateHasChanged();
        }
        status = cancel ? "Canceled" : "Completed";
        state = "START";
        StateHasChanged();
    }

    void Cancel()
    {
        cancel = true;
    }

    async Task ConnectAsync()
    {
        if (connected) {
            return;
        }

        var hubUrl = NavigationManager.ToAbsoluteUri("/StreamReceiver").ToString();
        try {
            connection = new HubConnectionBuilder()
                .WithUrl(hubUrl)
                .Build();

            await connection.StartAsync();

            connected = true;
        }
        catch (Exception exception) {
            status = $"Exception: {exception.Message}";
            connected = false;
        }
    }

    public async ValueTask DisposeAsync()
    {
        if (connected) {
            await connection.StopAsync();
            await connection.DisposeAsync();
            await Task.Delay(300);
            connected = false;
        }
    }
}